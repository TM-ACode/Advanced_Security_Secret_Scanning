
name: Configuration Secrets

patterns:
  - name: Hardcoded Database Passwords 
    type: hardcoded_database_passwords
    comments:
      - "Only support for Postgres and MySQL password strings"
      - "Checks if the password is null / length of 0"
      - "Supports quoted passwords"
      - "Not case sensative"
    regex:
      version: 0.1
      pattern: |
        [a-zA-Z0-9!$%&*+?^_`{|}~-]{1,}
      start: |
        [^0-9A-Za-z](?i)(postgres|mysql|mysql_root)_password(\s+|)(=|:)(\s+|)('|"|)
      end: |
        \z|[^a-zA-Z0-9!$%&*+?^_`{}|~-]|'|"

  - name: Hardcoded Spring SQL passwords
    description: |
      Hardcoded JDBC / Spring datasource passwords which typically are in property files or passed in at runtime
    type: hardcoded_spring_sql_passwords
    regex:
      version: 0.1
      pattern: |
        [^\r\n'"\p{Cc}]+
      start: |
        (?:spring\.datasource|jdbc)\.password[ \t]*=[ \t]*['"]?
      end: |
        \z|['"\r\n]
    expected:
      - name: application.properties
        start_offset: 314
        end_offset: 318
      - name: application.properties
        start_offset: 358
        end_offset: 375
      - name: application.properties
        start_offset: 422
        end_offset: 442
      - name: application.properties
        start_offset: 836
        end_offset: 843
      - name: application.properties
        start_offset: 1078
        end_offset: 1085
      - name: application.properties
        start_offset: 1346
        end_offset: 1353
      - name: application.properties
        start_offset: 1633
        end_offset: 1640


  - name: Django Secret Key
    type: django_secret_key
    regex:
      version: 0.1
      pattern: |
        [^\r\n"']+
      start: |
        \bSECRET_KEY[ \t]*=[ \t]*["']
      end: |
        ['"]
    comments:
      - "_If the secret is at the start of the file, its not picked up_"
    expected:
      - name: global_settings.py
        start_offset: 59
        end_offset: 109


  # Experimental

  - name: YAML Static Password Fields
    type: yaml_static_password_fields
    description: |
      Pattern to find Static passwords in YAML configuration files
    experimental: true
    regex:
      version: 0.1
      pattern: |
        [^\r\n'"]*
      start: |
        (?:\n|\A)[ \t]*(?:secret|service_pass(wd|word|code|phrase)|pass(?:wd|word|code|phrase)?|key)[ \t]*:[ \t]*['"]?
      end: |
        ['"\r\n]|\z
      additional_not_match:
        - ^keyPassphrase$
        - ^.* = (?:None|True|False),?$
        - ^.* = \.\.\.,?$
        - ^(?:(?:this|self|obj)\.)?[A-Za-z_]+\,$
        - ^(?:(?:this|self|obj)\.)[A-Za-z_].*$
        - ^(?:[a-zA-Z_]+(?:\(\))?\.)*[a-zA-Z_]+\(\)$
        - ^(?:str|int|bool)( +#.*)?$
        - ^[ \t]*$
        - ^\s*(?:typing\.)?(?:[Tt]uple|[Ll]ist|[Dd]ict|Callable|Iterable|Sequence|Optional|Union)\[.*$
        - ^\$\{[A-Za-z0-9_.-]+\}$
        # single digit or letter
        - ^[a-zA-Z0-9]$
        # React
        - ^\?string = null\,?$ 
        - ^null | .*$ 
        - ^.* | null,?$ 
        # Go assignments
        - ^= .*$
        # TypeScript types
        - ^(?:any|string|number)$
        # Variable substitution in CI/Actions - deliberately not anchored
        - ^.*\{\{[^}]+\}\}.*$
        - ^\(\([a-zA-Z0-9-]+\)\)$
        # env variable access
        - ^process\.env\.[A-Z0-9_]+,?$
        # Rust
        - ^&$
        - ^[&$<(]?[a-zA-Z0-9_]+(?:::\$?[a-zA-Z0-9_]+)*[<(].*$
        - ^[&$<(]?[a-zA-Z0-9_]+(?:::\$?[a-zA-Z0-9_]+)*,$
        - ^&\[[A-Za-z0-9_]+\],?$
        - ^cargo-installed-crates2-ubuntu-latest$
        - ^ubuntu-latest-cargo-installed-crates$
        # Flutter
        - ^(?:const )?ValueKey<.*$
        - ^(?:const )?(?:Global|Unique)Key\(\),?$
        - ^(?:const )?(?:Object|GlobalObject)?Key\(.*$
        - ^[a-zA-Z0-9_]+\.[a-z0-9_]+(?:Key|Label),?$
        # Scala types
        - ^[a-zA-Z0-9_]+(?:\.[a-zA-Z_0-9]+)*\[.*\],?$
        - ^String$
        # surrounded by []
        - ^\s*\[[^\]]*\]\s*$
        # stray single chars
        - ^[,()[\]{}`.]\\?$
        # hex
        - ^0x[A-Fa-f0-9]+,?$
        # bash variables
        - ^\$[1-9]$
        - ^\$[A-Za-z0-9_]+$
        # function calls or a new variable
        - ^(?:new )?[a-zA-Z0-9_.]+\(.*$
        # reference to a member variable
        - ^\s*(?:self|this)\.[a-zA-Z_][a-zA-Z0-9_]+[,[]?\s*$
        # index into a variable
        - ^\s*[a-zA-Z0-9_.]+\[(?:[a-zA-Z0-9_.]+)?\]?\s*$
        - ^\s*\.\.\.,?\s*$              # ...
        - ^\s*\\\s*$                    # a bare backslash
        - ^\\n$                         # \n
        - ^\s*,s*$                      # a bare comma
        - ^\\0$                         # literal \0
        # something that means "password" or a placeholder name - either a variable or a placeholder
        - ^(?i)(?:[A-Za-z0-9_.]*,\s*)?(?:str\()?[[<(]?(?:(?:user|key)_?)?(?:pass?(wo?r?d|code|phrase)|pass|pwd|secret|token|tok|redacted|placeholder|dummy|pw|thephrase|value),?[\]>)]?\\?$
        - ^.*token.*$
        - ^(?i)[a-zA-Z0-9._]+[_.](?:password|passphrase|secret|key).*$
        - ^.* passphrase .*$
        # a literal value or config switch
        - ^(?i)(?:[a-zA-Z0-9_.]*,\s*)?[[<(]?(?:write|read|on|off|true|false|none|null|nil|undefined|eof|ignore|eol|git|yes|no|y|n),?[\]>)]?(?:\)\s*\{)?\\?$

    comments:
      - "The hardcoded password is between 12 and 32 chars long"
      - "Some false positives in Code might appear"
      - "The pattern only checks for certain key words to begin the pattern (`secret`, `password`, etc.)"
    expected:
      - name: example.yml
        start_offset: 57
        end_offset: 80
      - name: example.yml
        start_offset: 57
        end_offset: 80

